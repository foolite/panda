<?xml version="1.0" encoding="UTF-8"?>
<project name="panda-web" default="usage" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<property name="prj.org" value="com.foolite"/>
	<property name="prj.name" value="panda-web"/>
	<property name="prj.title" value="Panda Web Framework"/>
	<property name="prj.url" value="https://github.com/foolite/panda-web"/>
	<property name="prj.scm" value="git@github.com:foolite/panda-web.git"/>
	<property name="prj.repo" location="../panda-repo"/>

	<!-- defined maven snapshots and staging repository id and url -->
	<property name="mvn.ssr.id" value="sonatype-nexus-snapshots" />
	<property name="mvn.ssr.url" value="https://oss.sonatype.org/content/repositories/snapshots" />
	<property name="mvn.sgr.id" value="sonatype-nexus-staging" />
	<property name="mvn.sgr.url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
	
	<!-- get prj.version -->
	<loadfile srcFile="../panda-java/src/main/java/panda/Panda.java" property="prj.version" encoding="UTF-8" failonerror="false">
		<filterchain>
			<striplinebreaks/>
			<linecontains>
				<contains value="VERSION"/>
			</linecontains>
			<tokenfilter>
				<replaceregex pattern="(.*)&quot;(.*)&quot;.*" replace="\2"/>
			</tokenfilter>
		</filterchain>
	</loadfile>
	<property name="prj.version" value="1.0.0"/>

	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss"/>
	</tstamp>

	<exec dir="${basedir}" executable="git" outputproperty="git.info" failifexecutionfails="false">
		<arg line="rev-list --all --count"/>
	</exec>
	<script language="javascript">
		var ver = project.getProperty("VERSION");
		if (ver == null) {
			function run(cmd) {
				var is = null;
				try {
					var p = java.lang.Runtime.getRuntime().exec(cmd);
					is = p.getInputStream();
					var br = new java.io.BufferedReader(new java.io.InputStreamReader(is));
					var o = "";
					var s;
					while ((s = br.readLine()) != null) {
						o += s.trim();
					}
					return o;
				}
				catch (e) {
					java.lang.System.err.println(e);
					return "";
				}
				finally {
					if (is != null) {
						is.close();
					}
				}
			}
			
			var rev = "0";
			if (new java.io.File(".git").exists()) {
				var s = run("git rev-list --all --count");
				if (s != "") {
					rev = s;
				}
			}
			else if (new java.io.File(".svn").exists()) {
				var si = run("svn info . --xml");
				if (si != "") {
					var b = si.indexOf("revision=\"") + 10;
					var e = si.indexOf("\"", b);
					rev = si.substring(b, e);
				}
			}
			project.setProperty("REVISION", rev);
			project.setProperty("VERSION", project.getProperty("prj.version") + "." + rev);
		}
	</script>

	<target name="usage">
		<echo><![CDATA[
${prj.name}-${VERSION} build file
-----------------------------------

Available targets are:

all               --> dist & test
build             --> Build the project (minjs, mincss)
min-css           --> Merge & minify css files
min-js            --> Merge & minify javascript files
dist              --> Distribute project as a jar file (build, jar)
jar               --> Make the project as a jar file
mvn-pom           --> Generate pom.xml
mvn-local-install --> Deploy release version to maven local repository
mvn-panda-deploy  --> Deploy release version to panda-repo repository
mvn-oss-deploy    --> Deploy snapshot version to maven snapshot repository
mvn-oss-stage     --> Deploy release version to maven staging repository
]]>
		</echo>
	</target>

	<!-- ivy -->
	<target name="ivy-resolve" description="ivy --> retreive dependencies">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="lib/tool"/>
		</delete>
		<ivy:retrieve conf="tool" pattern="lib/tool/[artifact](-[classifier]).[ext]"/>
	</target>

	<target name="ivy-clean" description="ivy --> clean the cache">
		<ivy:cleancache />
	</target>

	<!-- build -->
	<target name="min-js" description="Merge &amp; minify javascript files">
		<concat destfile="src/main/bootstrap2/js/bootstrap-datetimepicker-i18n.js" binary="true">
			<fileset dir="src/main/bootstrap2/js/locales">
				<include name="*.js"/>
			</fileset>
		</concat>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/bootstrap2/js/bootstrap-datetimepicker-i18n.js"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="js"/>
			<arg value="-o"/>
			<arg value="src/main/bootstrap2/js/bootstrap-datetimepicker-i18n.min.js"/>
		</java>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/bootstrap2/js/bootstrap-datetimepicker.js"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="js"/>
			<arg value="-o"/>
			<arg value="src/main/bootstrap2/js/bootstrap-datetimepicker.min.js"/>
		</java>

		<concat destfile="src/main/bootstrap3/js/bootstrap-datetimepicker-i18n.js" binary="true">
			<fileset dir="src/main/bootstrap3/js/locales">
				<include name="*.js"/>
			</fileset>
		</concat>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/bootstrap3/js/bootstrap-datetimepicker-i18n.js"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="js"/>
			<arg value="-o"/>
			<arg value="src/main/bootstrap3/js/bootstrap-datetimepicker-i18n.min.js"/>
		</java>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/bootstrap3/js/bootstrap-datetimepicker.js"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="js"/>
			<arg value="-o"/>
			<arg value="src/main/bootstrap3/js/bootstrap-datetimepicker.min.js"/>
		</java>

		<concat destfile="src/main/panda/js/panda.js" binary="true">
			<fileset dir="src/main/panda/js">
				<include name="core.*.js"/>
				<include name="ui.*.js"/>
			</fileset>
		</concat>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/panda/js/panda.js"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="js"/>
			<arg value="-o"/>
			<arg value="src/main/panda/js/panda.min.js"/>
		</java>

		<concat destfile="src/main/jquery/js/jquery-plugins.js" binary="true">
			<fileset dir="src/main/jquery/js" includes="jquery.*.js"/>
		</concat>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/jquery/js/jquery-plugins.js"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="js"/>
			<arg value="-o"/>
			<arg value="src/main/jquery/js/jquery-plugins.min.js"/>
		</java>
<!-- 
		<concat destfile="src/main/jquery/js/jquery-plugins-ja.js" binary="true">
			<fileset dir="src/main/jquery/js/i18n" includes="*-ja.js"/>
		</concat>
		<jsmin charset="UTF-8" 
			jsfile="src/main/jquery/js/jquery-plugins-ja.js" 
			minfile="src/main/jquery/js/jquery-plugins-ja.min.js"/>

		<concat destfile="src/main/jquery/js/jquery-plugins-zh-CN.js" binary="true">
			<fileset dir="src/main/jquery/js/i18n" includes="*-zh-CN.js"/>
		</concat>
		<jsmin charset="UTF-8" 
			jsfile="src/main/jquery/js/jquery-plugins-zh-CN.js" 
			minfile="src/main/jquery/js/jquery-plugins-zh-CN.min.js"/>

		<concat destfile="src/main/jquery/js/jquery-plugins-zh-TW.js" binary="true">
			<fileset dir="src/main/jquery/js/i18n" includes="*-zh-TW.js"/>
		</concat>
		<jsmin charset="UTF-8" 
			jsfile="src/main/jquery/js/jquery-plugins-zh-TW.js" 
			minfile="src/main/jquery/js/jquery-plugins-zh-TW.min.js"/>

		<concat destfile="src/main/jquery/js/jquery-plugins-zh-HK.js" binary="true">
			<fileset dir="src/main/jquery/js/i18n" includes="*-zh-HK.js"/>
		</concat>
		<jsmin charset="UTF-8" 
			jsfile="src/main/jquery/js/jquery-plugins-zh-HK.js" 
			minfile="src/main/jquery/js/jquery-plugins-zh-HK.min.js"/>
-->
	</target>

	<target name="min-css" description="Merge &amp; minify css files">
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/bootstrap2/css/bootstrap-datetimepicker.css"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="css"/>
			<arg value="-o"/>
			<arg value="src/main/bootstrap2/css/bootstrap-datetimepicker.min.css"/>
		</java>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/bootstrap3/css/bootstrap-datetimepicker.css"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="css"/>
			<arg value="-o"/>
			<arg value="src/main/bootstrap3/css/bootstrap-datetimepicker.min.css"/>
		</java>

		<concat destfile="src/main/panda/css/panda.css" binary="true">
			<fileset dir="src/main/panda/css" includes="ui.*.css"/>
		</concat>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/panda/css/panda.css"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="css"/>
			<arg value="-o"/>
			<arg value="src/main/panda/css/panda.min.css"/>
		</java>

		<concat destfile="src/main/jquery/css/jquery-plugins.css" binary="true">
			<fileset dir="src/main/jquery/css" includes="jquery.*.css"/>
		</concat>
		<java jar="lib/tool/yuicompressor.jar" fork="true">
			<arg value="src/main/jquery/css/jquery-plugins.css"/>
			<arg value="--charset"/>
			<arg value="UTF-8"/>
			<arg value="--type"/>
			<arg value="css"/>
			<arg value="-o"/>
			<arg value="src/main/jquery/css/jquery-plugins.min.css"/>
		</java>
	</target>

	<target name="build" depends="ivy-resolve, min-js, min-css" description="Build the project"/>

	<target name="jar" description="Make project as a jar file">
		<delete dir="out"/>
		<jar destfile="out/${prj.name}-${VERSION}.jar">
			<manifest>
				<attribute name="Created-By" value="${prj.org}"/>
				<attribute name="Built-By" value="${prj.org}"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Title" value="${prj.title}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/> 
				<attribute name="Implementation-Vendor" value="${prj.url}"/>
			</manifest>
			<fileset dir="src/main">
				<include name="**"/>
			</fileset>
		</jar>
	</target>
	
	<target name="ghp" description="Copy panda sources to panda-web gh-pages branch">
		<delete dir="../panda-web-ghp/${prj.version}"/>
		<mkdir dir="../panda-web-ghp/${prj.version}"/>
		<copy todir="../panda-web-ghp/${prj.version}" preservelastmodified="true">
			<fileset dir="src/main">
				<include name="panda/**"/>
				<include name="bootstrap3/**"/>
				<include name="jquery/**"/>
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="build, jar" description="Distribute project as a jar file"/>

	<target name="all" depends="dist"/>

	<!-- maven -->
	<macrodef name="writepom">
		<attribute name="version" default="${prj.version}"/>
		<sequential>
			<echo>version = @{version}</echo>
			<echo file="out/pom.xml"><![CDATA[
<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>${prj.org}</groupId>
	<artifactId>${prj.name}</artifactId>
	<packaging>jar</packaging>
	<name>${prj.title}</name>
	<version>@{version}</version>
	<description>Panda Web Framework</description>
	<url>${prj.url}</url>
	<licenses>
		<license>
			<name>GNU GENERAL PUBLIC LICENSE v3</name>
			<url>http://www.gnu.org/licenses/gpl-3.0.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<scm>
		<connection>scm:git:${prj.scm}</connection>
		<developerConnection>scm:git:${prj.scm}</developerConnection>
		<url>${prj.scm}</url>
	</scm>
	<developers>
		<developer>
			<id>yf.frank.wang</id>
			<name>Frank Wang</name>
			<email>yf.frank.wang@gmail.com</email>
		</developer>
	</developers>
	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>7</version>
	</parent>
</project>
]]>
			</echo>
		</sequential>
	</macrodef>

	<target name="mvn-pom" description="Write maven pom.xml">
		<writepom/>
	</target>
	
	<!-- local deploy -->
	<target name="mvn-local-install" description="Deploy release version to Maven local repository">
		<!-- write pom.xml -->
		<writepom/>

		<!-- deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="install:install-file" />
			<arg value="-DcreateChecksum=true" />
			<arg value="-DupdateReleaseInfo=true" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
		</artifact:mvn>
	</target>

	<!-- mvn panda-repo deploy -->
	<target name="mvn-panda-deploy" description="Deploy release version to panda-repo repository">
		<!-- write pom.xml -->
		<writepom/>

		<!-- deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="org.apache.maven.plugins:maven-deploy-plugin:2.8.1:deploy-file" />
			<arg value="-Durl=file://${prj.repo}" />
			<arg value="-DcreateChecksum=true" />
			<arg value="-DupdateReleaseInfo=true" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
		</artifact:mvn>
	</target>
	
	<!-- mvn sonatype snapshot deploy -->
	<target name="mvn-oss-snapshot" description="Deploy snapshot version to maven snapshot repository">
		<!-- write pom.xml -->
		<writepom version="${prj.version}-SNAPSHORT"/>

		<!-- deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="org.apache.maven.plugins:maven-deploy-plugin:2.8.1:deploy-file" />
			<arg value="-Durl=${mvn.ssr.url}" />
			<arg value="-DrepositoryId=${mvn.ssr.id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
		</artifact:mvn>
	</target>

	<!-- mvn sonatype release deploy -->
	<target name="mvn-oss-stage" description="Deploy release version to maven staging repository">
		<!-- write pom.xml -->
		<writepom/>

		<!-- sign and deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.4:sign-and-deploy-file" />
			<arg value="-Durl=${mvn.sgr.url}" />
			<arg value="-DrepositoryId=${mvn.sgr.id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-DupdateReleaseInfo=true" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
			<arg value="-Pgpg" />
		</artifact:mvn>
	</target>
</project>
