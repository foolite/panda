<?xml version="1.0" encoding="UTF-8"?>
<project name="panda-tool" default="usage" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<property name="prj.org" value="com.foolite"/>
	<property name="prj.name" value="panda-tool"/>
	<property name="prj.title" value="Panda Java Tools"/>
	<property name="prj.url" value="https://github.com/foolite/panda-tool"/>
	<property name="prj.scm" value="git@github.com:foolite/panda-tool.git"/>
	<property name="prj.repo" location="../panda-repo"/>

	<!-- defined maven snapshots and staging repository id and url -->
	<property name="mvn.ssr.id" value="sonatype-nexus-snapshots" />
	<property name="mvn.ssr.url" value="https://oss.sonatype.org/content/repositories/snapshots" />
	<property name="mvn.sgr.id" value="sonatype-nexus-staging" />
	<property name="mvn.sgr.url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
	
	<!-- get prj.version -->
	<loadfile srcFile="../panda-java/src/main/java/panda/Panda.java" property="prj.version" encoding="UTF-8">
		<filterchain>
			<striplinebreaks/>
			<linecontains>
				<contains value="VERSION"/>
			</linecontains>
			<tokenfilter>
				<replaceregex pattern="(.*)&quot;(.*)&quot;.*" replace="\2"/>
			</tokenfilter>
		</filterchain>
	</loadfile>
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss"/>
	</tstamp>

	<!-- get revision -->
	<script language="javascript">
		var ver = project.getProperty("VERSION");
		if (ver == null) {
			function run(cmd) {
				var is = null;
				try {
					var p = java.lang.Runtime.getRuntime().exec(cmd);
					is = p.getInputStream();
					var br = new java.io.BufferedReader(new java.io.InputStreamReader(is));
					var o = "";
					var s;
					while ((s = br.readLine()) != null) {
						o += s.trim();
					}
					return o;
				}
				catch (e) {
					java.lang.System.err.println(e);
					return "";
				}
				finally {
					if (is != null) {
						is.close();
					}
				}
			}
			
			var rev = "0";
			if (new java.io.File(".git").exists()) {
				var s = run("git rev-list --all --count");
				if (s != "") {
					rev = s;
				}
			}
			else if (new java.io.File(".svn").exists()) {
				var si = run("svn info . --xml");
				if (si != "") {
					var b = si.indexOf("revision=\"") + 10;
					var e = si.indexOf("\"", b);
					rev = si.substring(b, e);
				}
			}
			project.setProperty("REVISION", rev);
			project.setProperty("VERSION", project.getProperty("prj.version") + "." + rev);
		}
	</script>

	<path id="main.cp">
		<pathelement path="out/classes"/>
		<pathelement path="../panda-exts/out/classes"/>
		<pathelement path="../panda-java/out/classes"/>
		<fileset dir="lib/api">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/run">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/test">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="lib.cp">
		<pathelement path="../panda-exts/out/classes"/>
		<pathelement path="../panda-java/out/classes"/>
		<fileset dir="lib/api">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/run">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/jdbc">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/test">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="test.cp">
		<pathelement path="out/classes"/>
		<pathelement path="out/test-classes"/>
		<path refid="lib.cp"/>
	</path>

	<path id="junit.cp">
		<pathelement path="out/emma-classes"/>
		<pathelement path="out/test-classes"/>
		<path refid="lib.cp"/>
	</path>

	<path id="emma.cp">
		<pathelement location="lib/test/emma.jar"/>
		<pathelement location="lib/test/emma_ant.jar"/>
	</path>

	<!-- usage -->
	<target name="usage">
		<echo><![CDATA[
${prj.name}-${VERSION} build file
-----------------------------------

Available targets are:

all               --> dist & test
build             --> Build the project (clean, cp-res, javac)
clean             --> Delete everything in the output directory
cp-res            --> Copy resource files to the classes directory
dist              --> Distribute project as a jar file (build, jar)
ivy-resolve       --> Retreive dependencies
ivy-report        --> Generates a report of dependencies
ivy-clean         --> Clean the cache
jar               --> Make the project as a jar file
javac             --> Compile java source files
javadoc           --> Generate java documents
test              --> Test the project (test-build, test-run, test-report)
test-build        --> Build the test suite of project (test-clean, test-rescp, test-emma, test-javac)
test-clean        --> Delete test output files in the output directory
test-emma         --> EMMA instruments main classes
test-javac        --> Compile test java source files
test-javadoc      --> Generate test java documents
test-report       --> Build the test report
test-rescp        --> Copy test resource to the test classes directory
test-run          --> Run all junit test case
mvn-pom           --> Generate pom.xml
mvn-local-install --> Deploy release version to maven local repository
mvn-panda-deploy  --> Deploy release version to panda-repo repository
mvn-oss-deploy    --> Deploy snapshot version to maven snapshot repository
mvn-oss-stage     --> Deploy release version to maven staging repository
]]>
		</echo>
	</target>

	<!-- ivy -->
	<target name="ivy-resolve" description="ivy --> retreive dependencies">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="lib/api"/>
			<fileset dir="lib/run"/>
			<fileset dir="lib/jdbc"/>
			<fileset dir="lib/test"/>
		</delete>
		<ivy:retrieve conf="api,run,jdbc,test" pattern="lib/[conf]/[artifact](-[classifier]).[ext]"/>
	</target>

	<target name="ivy-report" depends="ivy-resolve" description="ivy --> generates a report of dependencies">
		<ivy:report todir="lib/ivy" conf="api,run,gae,jdbc,test"/>
	</target>

	<target name="ivy-clean" description="ivy --> clean the cache">
		<ivy:cleancache />
	</target>
	
	<!-- build -->
	<target name="clean" description="Delete everything in the output directory">
		<delete dir="out"/>
	</target>

	<target name="cp-res" description="Copy resource files to the classes directory">
		<mkdir dir="out/classes"/>
		<delete>
			<fileset dir="out/classes">
				<exclude name="**/*.class"/>
			</fileset>
		</delete>
		<copy todir="out/classes" preservelastmodified="true">
			<fileset dir="src/main/java">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="src/main/resources">
				<include name="**/*"/>
			</fileset>
			<fileset dir="src/main/templates">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="javac" description="Compile java source files">
		<mkdir dir="out/classes"/>
		<touch>
			<fileset dir="src/main/java" includes="**/package-info.java"/>
		</touch>
		<javac destdir="out/classes" encoding="UTF-8" source="1.6" target="1.6" debug="true" includeAntRuntime="false">
			<src path="src/main/java"/>
			<classpath refid="main.cp"/>
		</javac>
	</target>

	<target name="build" depends="clean, ivy-report, cp-res, javac" description="Build the project"/>

	<!-- dist -->
	<target name="javadoc" description="Generate java documents">
		<delete dir="out/javadoc"/>
		<javadoc 
			sourcepath="src/main/java" destdir="out/javadoc"
			encoding="UTF-8" docencoding="UTF-8" charset="UTF-8" locale="en_US"
			use="true" splitindex="true"
			windowTitle="${prj.title} ${prj.version} API"
			doctitle="${prj.title} ${prj.version} API"
			footer="&lt;a href=&quot;${prj.url}&quot;&gt;${prj.url}&lt;/a&gt;"
		>
			<classpath refid="main.cp"/>
		</javadoc>
	</target>

	<target name="jar" depends="javadoc" description="Make project as a jar file">
		<delete>
			<fileset dir="out" includes="*.jar"/>
		</delete>
		<copy file="LICENSE" todir="out/classes/META-INF" overwrite="true" force="true"/>
		<jar destfile="out/${prj.name}-${VERSION}.jar">
			<manifest>
				<attribute name="Created-By" value="${prj.org}"/>
				<attribute name="Built-By" value="${prj.org}"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Title" value="${prj.title}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/> 
				<attribute name="Implementation-Vendor" value="${prj.url}"/>
			</manifest>
			<fileset dir="out/classes"/>
		</jar>
		<jar destfile="out/${prj.name}-${VERSION}-sources.jar">
			<manifest>
				<attribute name="Created-By" value="${prj.org}"/>
				<attribute name="Built-By" value="${prj.org}"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Title" value="${prj.title}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/> 
				<attribute name="Implementation-Vendor" value="${prj.url}"/>
			</manifest>
			<fileset dir="src/main/java"/>
			<fileset dir="src/main/resources"/>
			<fileset dir="src/main/templates"/>
			<fileset dir="out/classes" includes="META-INF/LICENSE"/>
		</jar>
		<jar destfile="out/${prj.name}-${VERSION}-javadoc.jar">
			<manifest>
				<attribute name="Created-By" value="${prj.org}"/>
				<attribute name="Built-By" value="${prj.org}"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Title" value="${prj.title}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/>
				<attribute name="Implementation-Vendor" value="${prj.url}"/>
			</manifest>
			<fileset dir="out/javadoc"/>
		</jar>
	</target>

	<target name="dist" depends="build, javadoc, jar" description="Distribute project as a jar file"/>

	<!-- test -->
	<target name="test-clean" description="Delete test output files in the output directory">
		<delete dir="out/test-classes"/>
		<delete dir="out/test-javadoc"/>
		<delete dir="out/test-report"/>
		<delete dir="out/emma-classes"/>
		<delete dir="out/emma-report"/>
	</target>

	<target name="test-rescp" description="Copy resource to the classes directory">
		<mkdir dir="out/test-classes"/>
		<delete>
			<fileset dir="out/test-classes">
				<exclude name="**/*.class"/>
			</fileset>
		</delete>
		<copy todir="out/test-classes" preservelastmodified="true">
			<fileset dir="src/test/java">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="src/test/resources">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="test-emma" description="EMMA instruments classes">
		<taskdef resource="emma_ant.properties" classpathref="emma.cp"/>
		
		<!-- EMMA instr class output directory (it is important to create this property only when EMMA is enabled) -->
		<mkdir dir="out/emma-classes"/>

		<copy todir="out/emma-classes" preservelastmodified="true">
			<fileset dir="out/classes"/>
		</copy>

		<!-- Instrument the classes, this takes the normal classes, and makes instrumented classes instead -->
		<!-- Note that EMMA takes regular ANT path elements as instrumentation input, which is exceedingly convenient -->
		<emma>
			<instr instrpath="out/emma-classes"
				 metadatafile="out/emma-report/metadata.emma"
				 merge="true"
				 mode="overwrite"
			/>
		</emma>
	</target>

	<target name="test-javac" description="Compile test source java files">
		<mkdir dir="out/test-classes"/>
		<javac destdir="out/test-classes" encoding="UTF-8" source="1.6" target="1.6" debug="true" includeAntRuntime="false">
			<src path="src/test/java"/>
			<classpath refid="test.cp"/>
		</javac>
	</target>

	<target name="test-build"
		depends="test-clean, test-rescp, test-emma, test-javac"
		description="Build the test suite of project"/>

	<target name="test-run" description="Run all junit test case">
		<mkdir dir="out/test-report"/>

		<junit printsummary="yes" haltonfailure="no" fork="true" forkmode="once">
			<jvmarg value="-Demma.coverage.out.file=out/emma-report/coverage.emma"/>
			<jvmarg value="-Demma.coverage.out.merge=false"/>
			<classpath refid="junit.cp"/>
			<batchtest fork="yes" todir="out/test-report">
				<formatter type="xml"/>
				<fileset dir="src/test/java">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test-report" description="Build the test report">
		<junitreport todir="out/test-report">
			<fileset dir="out/test-report">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="out/test-report"/>
		</junitreport>

		<emma>
			<report sourcepath="src/main/java"
				sort="+name,+class,+method,+block"
				metrics="method:70,block:80,line:80,class:100"
			>
				<!-- collect all EMMA data dumps (metadata and runtime)
					 [this can be done via nested <fileset> fileset elements
					 or <file> elements pointing to a single file]:
				-->
				<fileset dir="out/emma-report" >
					<include name="*.emma"/>
				</fileset>

				<!-- for every type of report desired, configure a nested
					 element; various report parameters
					 can be inherited from the parent <report>
					 and individually overridden for each report type:
				-->
				<txt outfile="out/emma-report/coverage.txt"
					depth="package"
					columns="class,method,block,line,name"
				/>
				<xml outfile="out/emma-report/coverage.xml"
					depth="package"
				/>
				<html outfile="out/emma-report/coverage.html"
					depth="method"
					columns="name,class,method,block,line"
				/>
			</report>
		</emma>
	</target>

	<target name="test-javadoc" description="Generate test java documents">
		<delete dir="out/test-javadoc"/>
		<javadoc
			sourcepath="src/test/java" destdir="out/test-javadoc"
			encoding="UTF-8" docencoding="UTF-8" charset="UTF-8" locale="en_US"
			use="true" splitindex="true"
			windowTitle="${prj.title} ${VERSION} Test API"
			doctitle="${prj.title} ${VERSION} Test API"
			footer="&lt;a href=&quot;http://${prj.url}&quot;&gt;${prj.url}&lt;/a&gt;"
		>
			<classpath refid="test.cp"/>
		</javadoc>
	</target>

	<target name="test"
		depends="test-build, test-run, test-report"
		description="Test the project (test-build, test-run, test-report)"/>

	<!-- all -->
	<target name="all" depends="dist, test"/>

	<!-- maven -->
	<macrodef name="writepom">
		<attribute name="version" default="${prj.version}"/>
		<sequential>
			<echo>version = @{version}</echo>
			<echo file="out/pom.xml"><![CDATA[
<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>${prj.org}</groupId>
	<artifactId>${prj.name}</artifactId>
	<packaging>jar</packaging>
	<name>${prj.title}</name>
	<version>@{version}</version>
	<description>Panda Java Tools</description>
	<url>${prj.url}</url>
	<licenses>
		<license>
			<name>GNU GENERAL PUBLIC LICENSE v3</name>
			<url>http://www.gnu.org/licenses/gpl-3.0.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<scm>
		<connection>scm:git:${prj.scm}</connection>
		<developerConnection>scm:git:${prj.scm}</developerConnection>
		<url>${prj.scm}</url>
	</scm>
	<developers>
		<developer>
			<id>yf.frank.wang</id>
			<name>Frank Wang</name>
			<email>yf.frank.wang@gmail.com</email>
		</developer>
	</developers>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<optional>true</optional>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>7</version>
	</parent>
</project>
]]>
			</echo>
		</sequential>
	</macrodef>

	<target name="mvn-pom" description="Write maven pom.xml">
		<writepom/>
	</target>
	
	<!-- local deploy -->
	<target name="mvn-local-install" description="Deploy release version to Maven local repository">
		<!-- write pom.xml -->
		<writepom/>

		<!-- deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="install:install-file" />
			<arg value="-DcreateChecksum=true" />
			<arg value="-DupdateReleaseInfo=true" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
		</artifact:mvn>
		<artifact:mvn pom="out/pom.xml">
			<arg value="install:install-file" />
			<arg value="-DcreateChecksum=true" />
			<arg value="-Dpackaging=java-source" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}-sources.jar" />
		</artifact:mvn>
		<artifact:mvn pom="out/pom.xml">
			<arg value="install:install-file" />
			<arg value="-DcreateChecksum=true" />
			<arg value="-Dpackaging=javadoc" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}-javadoc.jar" />
		</artifact:mvn>
	</target>

	<!-- mvn panda-repo deploy -->
	<target name="mvn-panda-deploy" description="Deploy release version to panda-repo repository">
		<!-- write pom.xml -->
		<writepom/>

		<!-- deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="org.apache.maven.plugins:maven-deploy-plugin:2.8.1:deploy-file" />
			<arg value="-Durl=file://${prj.repo}" />
			<arg value="-DcreateChecksum=true" />
			<arg value="-DupdateReleaseInfo=true" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
			<arg value="-Dsources=${prj.name}-${VERSION}-sources.jar" />
			<arg value="-Djavadoc=${prj.name}-${VERSION}-javadoc.jar" />
		</artifact:mvn>
	</target>
	
	<!-- mvn sonatype snapshot deploy -->
	<target name="mvn-oss-snapshot" description="Deploy snapshot version to maven snapshot repository">
		<!-- write pom.xml -->
		<writepom version="${prj.version}-SNAPSHORT"/>

		<!-- deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="org.apache.maven.plugins:maven-deploy-plugin:2.8.1:deploy-file" />
			<arg value="-Durl=${mvn.ssr.url}" />
			<arg value="-DrepositoryId=${mvn.ssr.id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
		</artifact:mvn>
	</target>

	<!-- mvn sonatype release deploy -->
	<target name="mvn-oss-stage" description="Deploy release version to maven staging repository">
		<!-- write pom.xml -->
		<writepom/>

		<!-- sign and deploy the artifact -->
		<artifact:mvn pom="out/pom.xml">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.4:sign-and-deploy-file" />
			<arg value="-Durl=${mvn.sgr.url}" />
			<arg value="-DrepositoryId=${mvn.sgr.id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-DupdateReleaseInfo=true" />
			<arg value="-Dfile=${prj.name}-${VERSION}.jar" />
			<arg value="-Dsources=${prj.name}-${VERSION}-sources.jar" />
			<arg value="-Djavadoc=${prj.name}-${VERSION}-javadoc.jar" />
			<arg value="-Pgpg" />
		</artifact:mvn>
	</target>
</project>
